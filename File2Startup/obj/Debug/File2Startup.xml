<?xml version="1.0"?>
<doc>
<assembly>
<name>
File2Startup
</name>
</assembly>
<members>
<member name="T:My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a <see cref="T:System.Windows.Forms.MessageBox"/> that will be displayed centered to the 
 specified <see cref="T:System.Windows.Forms.Form"/> or <see cref="T:System.Windows.Forms.Control"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Using msg As New CenteredMessageBox(owner:=Me, timeOut:=2500)
 
     msg.Show("Text", "Title", MessageBoxButtons.OK, MessageBoxIcon.Information)
 
 End Using
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox._TimeoutTimer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 A <see cref="T:System.Windows.Forms.Timer"/> that keeps track of <see cref="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeOut"/> value to close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.tries">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Keeps track of the current amount of tries to find this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.DialogWindowHandle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the messagebox main window handle (hwnd).
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The messagebox main window handle (hwnd).
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.dialogWindowHandleB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The messagebox main window handle (hwnd).
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Owner">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the owner <see cref="T:System.Windows.Forms.Control"/> to center the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The owner <see cref="T:System.Windows.Forms.Control"/> to center the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.ownerB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The owner <see cref="T:System.Windows.Forms.Form"/> to center the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeOut">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the time interval to auto-close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>, in milliseconds.
 Default value is '0', which means Infinite.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Form)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Form"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Form,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Form"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 
 <param name="timeOut">
 The time interval to auto-close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>, in milliseconds.
 <para></para>
 Default value is 0, which means Infinite.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Control"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor(System.Windows.Forms.Control,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="owner">T
 The <see cref="T:System.Windows.Forms.Control"/> that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>.
 </param>
 
 <param name="timeOut">
 The time interval to auto-close this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/>, in milliseconds.
 <para></para>
 Default value is 0, which means Infinite.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text and caption.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text, caption, and buttons.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with specified text, caption, buttons, and icon.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, and default button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, and options.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="displayHelpButton">
 <see langword="True"/> to show the Help button; otherwise, false. The default is <see langword="False"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file and HelpNavigator.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 
 <param name="navigator">
 One of the <see cref="T:System.Windows.Forms.HelpNavigator"/> values.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file and Help keyword.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 
 <param name="keyword">
 The Help keyword to display when the user clicks the Help button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.String,System.Windows.Forms.HelpNavigator,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, 
 using the specified Help file, HelpNavigator, and Help topic.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The text to display in the message box.
 </param>
 
 <param name="caption">
 The text to display in the title bar of the message box.
 </param>
 
 <param name="buttons">
 One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.
 </param>
 
 <param name="icon">
 One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon  to display in the message box.
 </param>
 
 <param name="defaultButton">
 One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.
 </param>
 
 <param name="options">
 One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which display and association options will be used for 
 the message box. 
 <para></para>
 You may pass in 0 if you wish to use the defaults.
 </param>
 
 <param name="helpFilePath">
 The path and name of the Help file to display when the user clicks the Help button.
 </param>
 
 <param name="navigator">
 One of the <see cref="T:System.Windows.Forms.HelpNavigator"/> values.
 </param>
 
 <param name="param">
 The numeric ID of the Help topic to display when the user clicks the Help button.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.FindDialog">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Finds the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog window.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.CheckWindow(System.IntPtr,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Checks whether the specified window is our <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to check.
 </param>
 
 <param name="lParam">
 The application-defined value given in the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> function.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> the specified window is our <see cref="T:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox"/> dialog window, 
 <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeoutTimer_Tick(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of the <see cref="P:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.TimeoutTimer"/> control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.CenteredMessageBox.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and, optionally, managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Represents a control-hint and it's personalization.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.HintType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the control-hint type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control-hint type.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.hintTypeB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The control-hint type.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.Text">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the hint text.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The hint text.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.textB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The hint text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.Font">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text font.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The text font.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.fontB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Baking field )
 The hint text.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.ForeColor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the text color.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The text color.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,ElektroKit.Core.Application.UserInterface.Enums.ControlHintType)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="text">
 The hint text.
 </param>
 
 <param name="font">
 The text font.
 </param>
 
 <param name="forecolor">
 The text forecolor.
 </param>
 
 <param name="hintType">
 The control-hint type.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Add magnetism to the edges of a window,
 in this way, by bringing the window to a screen edge, the edge of the window adheres it to the edge of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Private magnetizer As New WindowMagnetizer(Me) With
     {
         .Enabled = True,
         .AllowOffscreen = True,
         .Threshold = 30
     }
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.isResizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the owner window is being resized by one of its edges.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.OwnerWindow">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the window that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The window.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.ownerWindowB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The window that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.Handle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the handle for the window that owns this <see cref="T:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer"/> instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The handle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.Threshold">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets, in pixels, the minimum threshold that the magnetic window needs to dock it on the nearest window border.
 <para></para>
 (Default value is <c>20</c>))
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The minimum threshold that the magnetic window needs to dock it on the nearest window border.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.thresholdB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The minimum threshold that the magnetic window needs to dock it on the nearest window border.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.Enabled">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the magnetizer is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the magnetizer is enabled, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.enabledB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the magnetizer is enabled.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.AllowOffscreen">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets a value indicating whether the window can be moved off-screen.
 <para></para>
 Default value is <see langword="True"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 <see langword="True"/> if the window can be moved off-screen, otherwise, <see langword="False"/>.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.allowOffscreenB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 A value indicating whether the window can be moved off-screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.#ctor(System.Windows.Forms.IWin32Window)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer"/> class.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The <see cref="T:System.Windows.Forms.IWin32Window"/> window that owns this instance (eg. a <see cref="T:System.Windows.Forms.Form"/> window).
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.DockToNearestScreenBorder(System.Windows.Forms.IWin32Window,System.IntPtr,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 If the margin between the specified <paramref name="window"/> 
 and the nearest border of the active screeen is lower than the value specified in <paramref name="threshold"/>,
 then it docks the window to the border. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="window">
 The magnetic window.
 </param>
 
 <param name="windowPosHandle">
 A pointer to a <see cref="T:ElektroKit.Interop.Win32.Types.WindowPos"/> structure that contains the 
 new size and position of the <paramref name="window"/>.
 </param>
 
 <param name="threshold">
 The minimum threshold that the window needs to dock it on the nearest desktop border.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.WndProc(System.Windows.Forms.Message@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Invokes the default window procedure associated with this window to process windows messages.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.isDisposed">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Flag to detect redundant calls when disposing.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.Dispose">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Releases all the resources used by this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Types.WindowMagnetizer.Dispose(System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 Releases unmanaged and, optionally, managed resources.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="isDisposing">
 <see langword="True"/>  to release both managed and unmanaged resources; 
 <see langword="False"/> to release only unmanaged resources.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Manages the control-hints of the edit-controls of a <see cref="T:System.Windows.Forms.Form"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim hintInfo1 As New ControlHintInfo("I'm a persistent hint.", Nothing,
                                      Color.Gray, ControlHintType.Normal)
 
 Dim hintInfo2 As New ControlHintInfo("I've set this hint on multiple controls at once!", Nothing,
                                      Color.Gray, ControlHintType.Normal)
 
 Dim hintInfo3 As New ControlHintInfo("Write something here...", New Font("lucida console", 15),
                                      Color.YellowGreen, ControlHintType.Normal)
 
 SetHint(TextBox1, hintInfo1)
 SetHint({TextBox2, TextBox3}, hintInfo2)
 SetHint(RichTextBox1, hintInfo3)
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.ControlHints">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the control-hints that has been created.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The control-hints that has been created.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.controlHintsB">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 The control-hints that has been created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.controlHintsDefaults">
 ----------------------------------------------------------------------------------------------------
 <summary>
 ( Backing field )
 Remembers the handled controls and they default property values.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.#ctor">
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager"/> class from being created.
 </summary>
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.SetHint(System.Windows.Forms.Control,ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets a new control-hint for an specific control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 
 <param name="hintInfo">
 The text-hint properties.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.Exception">
 control-hint text can't be null or empty.
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.SetHint(System.Windows.Forms.Control[],ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets a new control-hint for multiple controls at once.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="controls">
 The controls.
 </param>
 
 <param name="hintInfo">
 The control-hint properties.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.RemoveHint(System.Windows.Forms.Control)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a control-hint from a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The control.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.RemoveHint(System.Windows.Forms.Control[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Removes a control-hint from a control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrls">
 The controls.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.InstanceControlHintFields">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Instances the <see cref="F:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.controlHintsB"/> 
 and/or <see cref="F:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.controlHintsDefaults"/> members.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.GetPropertyValue``1(System.Windows.Forms.Control,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the property value of an specific control through reflection.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The Control.
 </param>
 
 <param name="propName">
 The name of the property to get it's value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the property is not found on the Control, the return value is <see langword="Nothing"/>,
 Otherwise, the return value is the control's property value.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.SetProperties(System.Object,ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sets the properties of an specific control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The Control.
 </param>
 
 <param name="hintInfo">
 The properties to set it's values.
 </param>
 
 <param name="skipProperties">
 The properties to skip.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.RestoreProperties(System.Object,ElektroKit.Core.Application.UserInterface.Types.ControlHintInfo,System.String[])">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Restores the properties of the specified control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="ctrl">
 The Control.
 </param>
 
 <param name="defaultProperties">
 The properties to reset it's values.
 </param>
 
 <param name="skipProperties">
 The properties to skip.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.Control_HandleCreated(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.Control_Enter(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Enter"/> event of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.Control_Leave(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.Leave"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.Control_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.Control_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event of the Control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.
 </param>
 
 <param name="e">
 The <see cref="T:System.Windows.Forms.KeyEventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Application.UserInterface.Tools.Graphical.ControlHintManager.Control_Disposed(System.Object,System.EventArgs)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Handles the <see cref="E:System.ComponentModel.Component.Disposed"/> event of the control.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="sender">
 The source of the event.</param>
 
 <param name="e">
 The <see cref="T:System.EventArgs"/> instance containing the event data.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.Application.UserInterface.Enums.ControlHintType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a type of control-hint.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Enums.ControlHintType.Normal">
 <summary>
 The hint is removed when the Control gets focus.
 </summary>
</member>
<member name="F:ElektroKit.Core.Application.UserInterface.Enums.ControlHintType.Persistent">
 <summary>
 The hint isn't removed when the Control gets focus.
 </summary>
</member>
<member name="T:ElektroKit.Core.Imaging.Tools.ImageUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains image related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------   
</member>
<member name="M:ElektroKit.Core.Imaging.Tools.ImageUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.Imaging.Tools.ImageUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Imaging.Tools.ImageUtil.ExtractIconFromFile(System.String,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Extracts a icon stored in the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ico As Icon = ExtractIconFromFile("C:\Windows\Explorer.exe", 0)
 Dim bmp As Bitmap = ico.ToBitmap()
 PictureBox1.BackgroundImage = bmp
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The source filepath.
 </param>
 
 <param name="iconIndex">
 The index of the icon to be extracted.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.Imaging.Tools.ImageUtil.ExtractIconFromFile(System.String,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Extracts a icon stored in the specified file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim ico As Icon = ExtractIconFromFile("C:\Windows\Explorer.exe", 0, 256)
 Dim bmp As Bitmap = ico.ToBitmap()
 PictureBox1.BackgroundImage = bmp
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The source filepath.
 </param>
 
 <param name="iconIndex">
 The index of the icon to be extracted.
 </param>
 
 <param name="iconSize">
 The icon size, in pixels.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Core.System.Tools.RegistryUtil">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains registry related utilities.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example that demonstrates various functionalities.
 <code>
 ' ----------------
 ' Instance RegInfo
 ' ----------------
 
 Dim regInfo As New RegInfo
 With regInfo
     .RootKeyName = "HKCU"
     .SubKeyPath = "Subkey Path"
     .ValueName = "Value Name"
     .ValueType = Microsoft.Win32.RegistryValueKind.String
     .ValueData = "Hello World!"
 End With
 
 Dim regInfoByte As New RegInfo(Of Byte())
 With regInfoByte
     .RootKeyName = "HKCU"
     .SubKeyPath = "Subkey Path"
     .ValueName = "Value Name"
     .ValueType = Microsoft.Win32.RegistryValueKind.Binary
     .ValueData = Global.System.Text.Encoding.ASCII.GetBytes("Hello World!")
 End With
 
 ' ----------------
 ' Create SubKey
 ' ----------------
 
 RegistryUtil.CreateSubKey(fullKeyPath:="HKCU\Subkey Path\")
 RegistryUtil.CreateSubKey(rootKeyName:="HKCU",
                      subKeyPath:="Subkey Path")
 RegistryUtil.CreateSubKey(regInfo:=regInfoByte)
 
 Dim regKey1 As Microsoft.Win32.RegistryKey =
     RegistryUtil.CreateSubKey(fullKeyPath:="HKCU\Subkey Path\",
                          registryKeyPermissionCheck:=Microsoft.Win32.RegistryKeyPermissionCheck.Default,
                          registryOptions:=Microsoft.Win32.RegistryOptions.None)
 
 Dim regKey2 As Microsoft.Win32.RegistryKey =
     RegistryUtil.CreateSubKey(rootKeyName:="HKCU",
                          subKeyPath:="Subkey Path",
                          registryKeyPermissionCheck:=Microsoft.Win32.RegistryKeyPermissionCheck.Default,
                          registryOptions:=Microsoft.Win32.RegistryOptions.None)
 
 Dim regInfo2 As Registry.RegInfo(Of String) = RegistryUtil.CreateSubKey(Of String)(fullKeyPath:="HKCU\Subkey Path\")
 Dim regInfo3 As Registry.RegInfo(Of String) = RegistryUtil.CreateSubKey(Of String)(rootKeyName:="HKCU",
                                                                              subKeyPath:="Subkey Path")
 
 ' ----------------
 ' Create Value
 ' ----------------
 
 RegistryUtil.CreateValue(fullKeyPath:="HKCU\Subkey Path\",
                     valueName:="Value Name",
                     valueData:="Value Data",
                     valueType:=Microsoft.Win32.RegistryValueKind.String)
 
 RegistryUtil.CreateValue(rootKeyName:="HKCU",
                     subKeyPath:="Subkey Path",
                     valueName:="Value Name",
                     valueData:="Value Data",
                     valueType:=Microsoft.Win32.RegistryValueKind.String)
 
 RegistryUtil.CreateValue(regInfo:=regInfoByte)
 
 RegistryUtil.CreateValue(Of String)(fullKeyPath:="HKCU\Subkey Path\",
                                valueName:="Value Name",
                                valueData:="Value Data",
                                valueType:=Microsoft.Win32.RegistryValueKind.String)
 
 RegistryUtil.CreateValue(Of String)(rootKeyName:="HKCU",
                                subKeyPath:="Subkey Path",
                                valueName:="Value Name",
                                valueData:="Value Data",
                                valueType:=Microsoft.Win32.RegistryValueKind.String)
 
 RegistryUtil.CreateValue(Of Byte())(regInfo:=regInfoByte)
 
 ' ----------------
 ' Copy KeyTree
 ' ----------------
 
 RegistryUtil.CopyKeyTree(srcFullKeyPath:="HKCU\Source Subkey Path\",
                     dstFullKeyPath:="HKCU\Target Subkey Path\")
 
 RegistryUtil.CopyKeyTree(srcRootKeyName:="HKCU",
                     srcSubKeyPath:="Source Subkey Path\",
                     dstRootKeyName:="HKCU",
                     dstSubKeyPath:="Target Subkey Path\")
 
 ' ----------------
 ' Move KeyTree
 ' ----------------
 
 RegistryUtil.MoveKeyTree(srcFullKeyPath:="HKCU\Source Subkey Path\",
                     dstFullKeyPath:="HKCU\Target Subkey Path\")
 
 RegistryUtil.MoveKeyTree(srcRootKeyName:="HKCU",
                     srcSubKeyPath:="Source Subkey Path\",
                     dstRootKeyName:="HKCU",
                     dstSubKeyPath:="Target Subkey Path\")
 
 ' ----------------
 ' Copy SubKeys
 ' ----------------
 
 RegistryUtil.CopySubKeys(srcFullKeyPath:="HKCU\Source Subkey Path\",
                     dstFullKeyPath:="HKCU\Target Subkey Path\")
 
 RegistryUtil.CopySubKeys(srcRootKeyName:="HKCU",
                     srcSubKeyPath:="Source Subkey Path\",
                     dstRootKeyName:="HKCU",
                     dstSubKeyPath:="Target Subkey Path\")
 
 ' ----------------
 ' Move SubKeys
 ' ----------------
 
 RegistryUtil.MoveSubKeys(srcFullKeyPath:="HKCU\Source Subkey Path\",
                     dstFullKeyPath:="HKCU\Target Subkey Path\")
 
 RegistryUtil.MoveSubKeys(srcRootKeyName:="HKCU",
                     srcSubKeyPath:="Source Subkey Path\",
                     dstRootKeyName:="HKCU",
                     dstSubKeyPath:="Target Subkey Path\")
 
 ' ----------------
 ' Copy Value
 ' ----------------
 
 Registry.CopyValue(srcFullKeyPath:="HKCU\Source Subkey Path\",
                   sourceValueName:="Value Name",
                   dstFullKeyPath:="HKCU\Target Subkey Path\",
                   targetValueName:="Value Name")
 
 Registry.CopyValue(srcRootKeyName:="HKCU",
                   srcSubKeyPath:="Source Subkey Path\",
                   sourceValueName:="Value Name",
                   dstRootKeyName:="HKCU",
                   dstSubKeyPath:="Target Subkey Path\",
                   targetValueName:="Value Name")
 
 ' ----------------
 ' Move Value
 ' ----------------
 
 Registry.MoveValue(srcFullKeyPath:="HKCU\Source Subkey Path\",
                   sourceValueName:="Value Name",
                   dstFullKeyPath:="HKCU\Target Subkey Path\",
                   targetValueName:="Value Name")
 
 Registry.MoveValue(srcRootKeyName:="HKCU",
                   srcSubKeyPath:="Source Subkey Path\",
                   sourceValueName:="Value Name",
                   dstRootKeyName:="HKCU",
                   dstSubKeyPath:="Target Subkey Path\",
                   targetValueName:="Value Name")
 
 ' ----------------
 ' DeleteValue
 ' ----------------
 
 RegistryUtil.DeleteValue(fullKeyPath:="HKCU\Subkey Path\",
                     valueName:="Value Name",
                     throwOnMissingValue:=True)
 
 RegistryUtil.DeleteValue(rootKeyName:="HKCU",
                     subKeyPath:="Subkey Path",
                     valueName:="Value Name",
                     throwOnMissingValue:=True)
 
 RegistryUtil.DeleteValue(regInfo:=regInfoByte,
                     throwOnMissingValue:=True)
 
 ' ----------------
 ' Delete SubKey
 ' ----------------
 
 RegistryUtil.DeleteSubKey(fullKeyPath:="HKCU\Subkey Path\",
                      throwOnMissingSubKey:=False)
 
 RegistryUtil.DeleteSubKey(rootKeyName:="HKCU",
                      subKeyPath:="Subkey Path",
                      throwOnMissingSubKey:=False)
 
 RegistryUtil.DeleteSubKey(regInfo:=regInfoByte,
                      throwOnMissingSubKey:=False)
 
 ' ----------------
 ' Exist SubKey?
 ' ----------------
 
 Dim exist1 As Boolean = RegistryUtil.ExistSubKey(fullKeyPath:="HKCU\Subkey Path\")
 
 Dim exist2 As Boolean = RegistryUtil.ExistSubKey(rootKeyName:="HKCU",
                                             subKeyPath:="Subkey Path")
 
 ' ----------------
 ' Exist Value?
 ' ----------------
 
 Dim exist3 As Boolean = RegistryUtil.ExistValue(fullKeyPath:="HKCU\Subkey Path\",
                                            valueName:="Value Name")
 
 Dim exist4 As Boolean = RegistryUtil.ExistValue(rootKeyName:="HKCU",
                                            subKeyPath:="Subkey Path",
                                            valueName:="Value Name")
 
 ' ----------------
 ' Value Is Empty?
 ' ----------------
 
 Dim isEmpty1 As Boolean = RegistryUtil.ValueIsEmpty(fullKeyPath:="HKCU\Subkey Path\",
                                                valueName:="Value Name")
 
 Dim isEmpty2 As Boolean = RegistryUtil.ValueIsEmpty(rootKeyName:="HKCU",
                                                subKeyPath:="Subkey Path",
                                                valueName:="Value Name")
 
 ' ----------------
 ' Export Key
 ' ----------------
 
 RegistryUtil.ExportKey(fullKeyPath:="HKCU\Subkey Path\",
                   outputFile:="C:\Backup.reg")
 
 RegistryUtil.ExportKey(rootKeyName:="HKCU",
                   subKeyPath:="Subkey Path",
                   outputFile:="C:\Backup.reg")
 
 ' ----------------
 ' Import RegFile
 ' ----------------
 
 Registry.ImportRegFile(regFilePath:="C:\Backup.reg")
 
 ' ----------------
 ' Jump To Key
 ' ----------------
 
 RegistryUtil.JumpToKey(fullKeyPath:="HKCU\Subkey Path\")
 
 RegistryUtil.JumpToKey(rootKeyName:="HKCU",
                   subKeyPath:="Subkey Path")
 
 ' ----------------
 ' Find SubKey
 ' ----------------
 
 Dim regInfoSubkeyCol As IEnumerable(Of Registry.Reginfo) =
     RegistryUtil.FindSubKey(rootKeyName:="HKCU",
                        subKeyPath:="Subkey Path",
                        subKeyName:="Subkey Name",
                        matchFullSubKeyName:=False,
                        ignoreCase:=True,
                        searchOption:=IO.SearchOption.AllDirectories)
 
 For Each reg As Registry.RegInfo In regInfoSubkeyCol
     Debug.WriteLine(reg.RootKeyName)
     Debug.WriteLine(reg.SubKeyPath)
     Debug.WriteLine(reg.ValueName)
     Debug.WriteLine(reg.ValueData.ToString())
     Debug.WriteLine("")
 Next reg
 
 ' ----------------
 ' Find Value
 ' ----------------
 
 Dim regInfoValueNameCol As IEnumerable(Of Registry.Reginfo) =
     RegistryUtil.FindValue(rootKeyName:="HKCU",
                           subKeyPath:="Subkey Path",
                           valueName:="Value Name",
                           matchFullValueName:=False,
                           ignoreCase:=True,
                           searchOption:=IO.SearchOption.AllDirectories)
 
 For Each reg As Registry.RegInfo In regInfoValueNameCol
     Debug.WriteLine(reg.RootKeyName)
     Debug.WriteLine(reg.SubKeyPath)
     Debug.WriteLine(reg.ValueName)
     Debug.WriteLine(reg.ValueData.ToString())
     Debug.WriteLine("")
 Next reg
 
 ' ----------------
 ' Find Value Data
 ' ----------------
 
 Dim regInfoValueDataCol As IEnumerable(Of Registry.Reginfo) =
     RegistryUtil.FindValueData(rootKeyName:="HKCU",
                           subKeyPath:="Subkey Path",
                           valueData:="Value Data",
                           matchFullData:=False,
                           ignoreCase:=True,
                           searchOption:=IO.SearchOption.AllDirectories)
 
 For Each reg As Registry.RegInfo In regInfoValueDataCol
     Debug.WriteLine(reg.RootKeyName)
     Debug.WriteLine(reg.SubKeyPath)
     Debug.WriteLine(reg.ValueName)
     Debug.WriteLine(reg.ValueData.ToString())
     Debug.WriteLine("")
 Next reg
 
 ' ----------------
 ' Get...
 ' ----------------
 
 Dim rootKeyName As String = RegistryUtil.GetRootKeyName(registryPath:="HKCU\Subkey Path\")
 Dim subKeyPath As String = RegistryUtil.GetSubKeyPath(registryPath:="HKCU\Subkey Path\")
 Dim rootKey As Microsoft.Win32.RegistryKey = RegistryUtil.GetRootKey(registryPath:="HKCU\Subkey Path\")
 
 ' ----------------
 ' Get Value Data
 ' ----------------
 
 Dim dataObject As Object = RegistryUtil.GetValueData(rootKeyName:="HKCU",
                                                 subKeyPath:="Subkey Path",
                                                 valueName:="Value Name")
 
 Dim dataString As String = RegistryUtil.GetValueData(Of String)(fullKeyPath:="HKCU\Subkey Path\",
                                                            valueName:="Value Name",
                                                            registryValueOptions:=Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames)
 
 Dim dataByte As Byte() = RegistryUtil.GetValueData(Of Byte())(regInfo:=regInfoByte,
                                                          registryValueOptions:=Microsoft.Win32.RegistryValueOptions.None)
 Debug.WriteLine("dataByte=" &amp; String.Join(",", dataByte))
 
 ' -----------------
  Set UserAccessKey
 ' -----------------
 
 Registry.SetUserAccessKey(fullKeyPath:="HKCU\Subkey Path",
                          userAccess:={Registry.ReginiUserAccess.AdministratorsFullAccess})
 
 Registry.SetUserAccessKey(rootKeyName:="HKCU",
                          subKeyPath:="Subkey Path",
                          userAccess:={Registry.ReginiUserAccess.AdministratorsFullAccess,
                                       Registry.ReginiUserAccess.CreatorFullAccess,
                                       Registry.ReginiUserAccess.SystemFullAccess})
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Core.System.Tools.RegistryUtil"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CreateSubKey(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a new registry subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="registryKeyPermissionCheck">
 The registry key permission check.
 </param>
 
 <param name="registryOptions">
 The registry options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The registry key.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CreateSubKey(Microsoft.Win32.RegistryView,System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a new registry subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="registryKeyPermissionCheck">
 The registry key permission check.
 </param>
 
 <param name="registryOptions">
 The registry options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The registry key.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.DeleteSubKey(Microsoft.Win32.RegistryView,System.String,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a registry subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="throwOnMissingSubKey">
 If set to <see langword="True"/>, throws an exception on missing subkey.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.DeleteSubKey(Microsoft.Win32.RegistryView,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a registry subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="throwOnMissingSubKey">
 If set to <see langword="True"/>, throws an exception on missing subkey.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CreateValue``1(Microsoft.Win32.RegistryView,System.String,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates or replaces a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="valueData">
 The value data.
 </param>
 
 <param name="valueType">
 The registry value type.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or valueName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CreateValue``1(Microsoft.Win32.RegistryView,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates or replaces a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="valueData">
 The value data.
 </param>
 
 <param name="valueType">
 The registry value type.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.DeleteValue(Microsoft.Win32.RegistryView,System.String,System.String,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a registry subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="throwOnMissingValue">
 If set to <see langword="True"/>, throws an exception on missing value.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or valueName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.DeleteValue(Microsoft.Win32.RegistryView,System.String,System.String,System.Boolean)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Deletes a registry subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="throwOnMissingValue">
 If set to <see langword="True"/>, throws an exception on missing value.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData``1(Microsoft.Win32.RegistryView,System.String,System.String,System.String,``0,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="defaultIfEmpty">
 A default value to return if the data is empty.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData``1(Microsoft.Win32.RegistryView,System.String,System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData``1(Microsoft.Win32.RegistryView,System.String,System.String,``0,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="defaultIfEmpty">
 A default value to return if the data is empty.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData(Microsoft.Win32.RegistryView,System.String,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="defaultIfEmpty">
 A default value to return if the data is empty.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or valueName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData(Microsoft.Win32.RegistryView,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="defaultIfEmpty">
 A default value to return if the data is empty.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData``1(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <typeparam name="T">
 The type.
 </typeparam>
 
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData(Microsoft.Win32.RegistryView,System.String,System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or valueName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetValueData(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryValueOptions)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the data of a registry value.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 
 <param name="registryValueOptions">
 The registry value options.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The value data.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.IsRegistryFile(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a file is a valid Registry script file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 Dim isRegFile As Boolean = IsRegistryFile("C:\File.reg")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The .reg file path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ExistSubKey(Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a registry subkey exists.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if subkey exist, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ExistSubKey(Microsoft.Win32.RegistryView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a registry subkey exists.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if subkey exist, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ExistValue(Microsoft.Win32.RegistryView,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a registry value exists.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if value exist, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or valueName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ExistValue(Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a registry subkey exists.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if subkey exist, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ValueIsEmpty(Microsoft.Win32.RegistryView,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a registry value is empty.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 
 </param>
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if value is empty, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or valueName
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ValueIsEmpty(Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether a registry value is empty.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="valueName">
 The value name.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if value is empty, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ImportRegFile(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Imports a registry file into the current registry Hive.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="regFilePath">
 The registry filepath.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if operation succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 regFilePath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ExportKey(System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports a key to a registry file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 
 <param name="outputFile">
 The output file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if operation succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath or outputFile
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.ExportKey(Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Exports a key to a registry file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 
 <param name="outputFile">
 The output file.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if operation succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.JumpToKey(Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Runs Regedit.exe process to jump at the specified key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rootKeyName">
 The rootkey name.
 </param>
 
 <param name="subKeyPath">
 The subkey path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 rootKeyName or subKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.JumpToKey(Microsoft.Win32.RegistryView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Runs Registry.exe process to jump at the specified key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="fullKeyPath">
 The registry key full path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopyValue(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies a registry value (with its data) to another subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcFullKeyPath">
 The source registry key full path.
 </param>
 
 <param name="srcValueName">
 The source registry value name.
 </param>
 
 <param name="dstFullKeyPath">
 The target registry key full path.
 </param>
 
 <param name="dstValueName">
 The target registry value name.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopyValue(Microsoft.Win32.RegistryView,System.String,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies a registry value (with its data) to another subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRootKeyName">
 The source registry rootkey name.
 </param>
 
 <param name="srcSubKeyPath">
 The source registry subkey path.
 </param>
 
 <param name="srcValueName">
 The source registry value name.
 </param>
 
 <param name="dstRootKeyName">
 The target registry rootkey name.
 </param>
 
 <param name="dstSubKeyPath">
 The target registry subkey path.
 </param>
 
 <param name="dstValueName">
 The target registry value name.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.MoveValue(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves a registry value (with its data) to another subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcFullKeyPath">
 The source registry key full path.
 </param>
 
 <param name="srcValueName">
 The source registry value name.
 </param>
 
 <param name="dstFullKeyPath">
 The target registry key full path.
 </param>
 
 <param name="dstValueName">
 The target registry value name.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.MoveValue(Microsoft.Win32.RegistryView,System.String,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves a registry value (with its data) to another subkey.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRootKeyName">
 The source registry rootkey name.
 </param>
 
 <param name="srcSubKeyPath">
 The source registry subkey path.
 </param>
 
 <param name="srcValueName">
 The source registry value name.
 </param>
 
 <param name="dstRootKeyName">
 The target registry rootkey name.
 </param>
 
 <param name="dstSubKeyPath">
 The target registry subkey path.
 </param>
 
 <param name="dstValueName">
 The target registry value name.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopyKeyTree(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies a registry key tree to another registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRootKeyName">
 The source registry rootkey name.
 
 </param>
 <param name="srcSubKeyPath">
 The source registry subkey path.
 </param>
 
 <param name="dstRootKeyName">
 The target registry rootkey name.
 </param>
 
 <param name="dstSubKeyPath">
 The target registry subkey path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 srcRootKeyName or srcSubKeyPath or dstRootKeyName or dstSubKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopyKeyTree(Microsoft.Win32.RegistryView,System.String,Microsoft.Win32.RegistryView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies a registry key tree to another registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcFullKeyPath">
 The source registry key full path.
 </param>
 
 <param name="dstFullKeyPath">
 The target registry key full path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopySubKeys(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the sub-keys of the specified registry key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRegistryKey">
 The old key.
 </param>
 
 <param name="dstRegistryKey">
 The new key.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopySubKeys(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the sub-keys of the specified registry key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRootKeyName">
 The source registry rootkey name.
 </param>
 
 <param name="srcSubKeyPath">
 The source registry subkey path.
 </param>
 
 <param name="dstRootKeyName">
 The target registry rootkey name.
 </param>
 
 <param name="dstSubKeyPath">
 The target registry subkey path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CopySubKeys(Microsoft.Win32.RegistryView,System.String,Microsoft.Win32.RegistryView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Copies the sub-keys of the specified registry key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcFullKeyPath">
 The source registry key full path.
 </param>
 
 <param name="dstFullKeyPath">
 The target registry key full path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.MoveKeyTree(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves a registry key tree to another registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRootKeyName">
 The source registry rootkey name.
 </param>
 
 <param name="srcSubKeyPath">
 The source registry subkey path.
 </param>
 
 <param name="dstRootKeyName">
 The target registry rootkey name.
 </param>
 
 <param name="dstSubKeyPath">
 The target registry subkey path.
 </param>
 ----------------------------------------------------------------------------------------------------
 <exception cref="T:System.ArgumentNullException">
 srcRootKeyName or srcSubKeyPath or dstRootKeyName or dstSubKeyPath
 </exception>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.MoveKeyTree(Microsoft.Win32.RegistryView,System.String,Microsoft.Win32.RegistryView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves a registry key tree to another registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcFullKeyPath">
 The source registry key full path.
 </param>
 
 <param name="dstFullKeyPath">
 The target registry key full path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.MoveSubKeys(Microsoft.Win32.RegistryView,System.String,System.String,Microsoft.Win32.RegistryView,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the sub-keys of the specified registry key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRootKeyName">
 The source registry rootkey name.
 </param>
 
 <param name="srcSubKeyPath">
 The source registry subkey path.
 </param>
 
 <param name="dstRootKeyName">
 The target registry rootkey name.
 </param>
 
 <param name="dstSubKeyPath">
 The target registry subkey path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.MoveSubKeys(Microsoft.Win32.RegistryView,System.String,Microsoft.Win32.RegistryView,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Moves the sub-keys of the specified registry key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcFullKeyPath">
 The source registry key full path.
 </param>
 
 <param name="dstFullKeyPath">
 The target registry key full path.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetRootKey(System.String,Microsoft.Win32.RegistryView)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the root <see cref="T:Microsoft.Win32.RegistryKey"/> of a registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The root <see cref="T:Microsoft.Win32.RegistryKey"/> of a registry path.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetRootKeyName(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the root key name of a registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The root key name of a registry path.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.GetSubKeyPath(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the subkey path of a registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The subkey path of a registry path.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.LoadHive(System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Loads the subkeys of a hive file, 
 creating a subkey with the specified name into <c>HKEY_LOCAL_MACHINE</c> root key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 LoadHive("C:\WinMount\Users\Administrador\NTUSER.DAT", "My External Branch")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="filepath">
 The hive filepath.
 </param>
 
 <param name="subkeyName">
 The name to give to the loaded subkey.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.UnloadHive(System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unloads a previouslly hive file that has been loaded into <c>HKEY_LOCAL_MACHINE</c> root key.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <example> This is a code example.
 <code>
 UnloadHive("HKEY_LOCAL_MACHINE\My External Branch")
 or:
 UnloadHive("My External Branch")
 </code>
 </example>
 ----------------------------------------------------------------------------------------------------
 <param name="subkeyName">
 The name of the subkey to unload.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Core.System.Tools.RegistryUtil.CollectSubKeys(Microsoft.Win32.RegistryKey,System.IO.SearchOption)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Collects the subkeys on the specified registry path.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="srcRegistryKey">
 The source registry key.
 </param>
 
 <param name="searchOption">
 The search mode.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see cref="T:System.Collections.Generic.IEnumerable`1"/>
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Interop.Win32.Delegates"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Delegates.EnumWindowsProc">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An application-defined callback function used with the NativeMethods.EnumWindows 
 or NativeMethods.EnumDesktopWindows function.
 <para></para>
 It receives top-level window handles.
 <para></para>
 The <c>WNDENUMPROC</c> type defines a pointer to this callback function.
 <para></para>
 <see cref="T:ElektroKit.Interop.Win32.Delegates.EnumWindowsProc"/> is a placeholder for the application-defined function name. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633498%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to a top-level window.
 </param>
 
 <param name="lParam">
 The application-defined value given in NativeMethods.EnumWindows 
 or NativeMethods.EnumDesktopWindows functions.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 To continue enumeration, the callback function must return <see langword="True"/>; 
 to stop enumeration, it must return <see langword="False"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Delegates.EnumChildWindowsProc">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An application-defined callback function used with the NativeMethods.EnumChildWindows function.
 <para></para>
 It receives the child window handles.
 <para></para>
 The <c>WNDENUMPROC</c> type defines a pointer to this callback function.
 <para></para>
 <see cref="T:ElektroKit.Interop.Win32.Delegates.EnumChildWindowsProc"/> is a placeholder for the application-defined function name. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633493%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to a child window of the parent window specified in NativeMethods.EnumChildWindows function. 
 </param>
 
 <param name="lParam">
 The application-defined value given in NativeMethods.EnumChildWindows function.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 To continue enumeration, the callback function must return <see langword="True"/>; 
 to stop enumeration, it must return <see langword="False"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc">
 ----------------------------------------------------------------------------------------------------
 <summary>
 An application-defined callback function used with the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> function.
 <para></para>
 It receives the window handles associated with a thread.
 <para></para>
 The <c>WNDENUMPROC</c> type defines a pointer to this callback function.
 <para></para>
 <see cref="T:ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc"/> is a placeholder for the application-defined function name. 
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633496%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to a window associated with the thread specified in the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> function. 
 </param>
 
 <param name="lParam">
 The application-defined value given in <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> functions.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 To continue enumeration, the callback function must return <see langword="True"/>; 
 to stop enumeration, it must return <see langword="False"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.GetHashCode">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Serves as a hash function for a particular type.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.GetType">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the <see cref="T:System.Type"/> of the current instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The exact runtime type of the current instance.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.Equals(System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="obj">
 Another object to compare to.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
 otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.Equals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are considered equal.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the objects are considered equal; otherwise, <see langword="False"/>.
 <para></para>
 If both <paramref name="objA"/> and <paramref name="objB"/> are <see langword="Nothing"/>, 
 the method returns <see langword="True"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.ReferenceEquals(System.Object,System.Object)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Determines whether the specified <see cref="T:System.Object"/> instances are the same instance.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="objA">
 The first object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <param name="objB">
 The second object to compare.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if <paramref name="objA"/> is the same instance as <paramref name="objB"/> 
 or if both are <see langword="Nothing"/>; otherwise, <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Delegates.ToString">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Returns a String that represents the current object.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <returns>
 A string that represents the current object.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.HResult">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies error conditions and warning conditions about the success or failure of a method or function call.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 Wikipedia: <see href="http://en.wikipedia.org/wiki/HRESULT"/> class.
 <para></para>
 MSDN guidelines: <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ff485842%28v=vs.85%29.aspx"/> class.
 <para></para>
 List of HRESULT codes: <see href="http://msdn.microsoft.com/en-us/library/cc704587.aspx"/> class.
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.S_OK">
 <summary>
 Success.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.S_FALSE">
 <summary>
 Success.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_ACCESSDENIED">
 <summary>
 Access denied.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_FAIL">
 <summary>
 Unspecified Error.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_INVALIDARG">
 <summary>
 Invalid parameter value.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_ELEMENTNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_OUTOFMEMORY">
 <summary>
 Out Of memory.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_POINTER">
 <summary>
 NULL was passed incorrectly For a pointer value.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_UNEXPECTED">
 <summary>
 Unexpected condition.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_ABORT">
 <summary>
 Operation aborted.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_HANDLE">
 <summary>
 Handle that is not valid.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_NOTIMPL">
 <summary>
 Not implemented.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_PENDING">
<summary>
The data necessary to complete this operation is not yet available.
</summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.DISP_E_OVERFLOW">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.DISP_E_DIVBYZERO">
 <summary>
 A divide by zero error.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_BOUNDS">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.E_CHANGED_STATE">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_BAD_FORMAT">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_ARITHMETIC_OVERFLOW">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_PATH_NOT_FOUND">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_FILE_NOT_FOUND">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_FILENAME_EXCED_RANGE">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_STACK_OVERFLOW">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_SHARING_VIOLATION">
 <summary>
 The process cannot access the file because it is being used by another process.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.FUSION_E_INVALID_NAME">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.FUSION_E_REF_DEF_MISMATCH">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.NTE_FAIL">
 <summary>
 Error wrapped in <see cref="T:System.Security.Cryptography.CryptographicException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.REGDB_E_CLASSNOTREG">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.RO_E_CLOSED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.TYPE_E_TYPEMISMATCH">
 <summary>
 Error wrapped in <see cref="T:System.InvalidCastException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.TYPE_E_ELEMENTNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.NO_OBJECT">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.ERROR_CANCELLED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_ABANDONEDMUTEX">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_AMBIGUOUSMATCH">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_APPDOMAINUNLOADED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_APPLICATION">
 <summary>
 Error wrapped in <see cref="T:System.ApplicationException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_ARGUMENTOUTOFRANGE">
 <summary>
 Error wrapped in <see cref="T:System.ArgumentOutOfRangeException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_ARRAYTYPEMISMATCH">
 <summary>
 Error wrapped in <see cref="T:System.ArrayTypeMismatchException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_CANNOTUNLOADAPPDOMAIN">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_CONTEXTMARSHAL">
 <summary>
 Error wrapped in <see cref="T:System.ContextMarshalException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_CUSTOMATTRIBUTEFORMAT">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_DATAMISALIGNED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_DLLNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_DUPLICATEWAITOBJECT">
 <summary>
 Error wrapped in <see cref="T:System.DuplicateWaitObjectException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_ENDOFSTREAM">
 <summary>
 Error wrapped in <see cref="T:System.IO.EndOfStreamException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_FILELOAD">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_EXCEPTION">
 <summary>
 Error wrapped in <see cref="T:System.Exception"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_EXECUTIONENGINE">
 <summary>
 Error wrapped in <see cref="T:System.ExecutionEngineException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_FIELDACCESS">
 <summary>
 Error wrapped in <see cref="T:System.FieldAccessException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_FORMAT">
 <summary>
 Error wrapped in <see cref="T:System.FormatException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_HOSTPROTECTION">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INDEXOUTOFRANGE">
 <summary>
 Error wrapped in <see cref="T:System.IndexOutOfRangeException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INSUFFICIENTEXECUTIONSTACK">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INSUFFICIENTMEMORY">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INVALIDCAST">
 <summary>
 Error wrapped in <see cref="T:System.InvalidCastException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INVALIDCOMOBJECT">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.InteropServices.InvalidComObjectException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INVALIDFILTERCRITERIA">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.InvalidFilterCriteriaException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INVALIDOLEVARIANTTYPE">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INVALIDOPERATION">
 <summary>
 Error wrapped in <see cref="T:System.InvalidOperationException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_IO">
 <summary>
 Error wrapped in <see cref="T:System.IO.IOException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_INVALIDPROGRAM">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_KEYNOTFOUND">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MARSHALDIRECTIVE">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MEMBERACCESS">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_METHODACCESS">
 <summary>
 Error wrapped in <see cref="T:System.MethodAccessException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MISSINGFIELD">
 <summary>
 Error wrapped in <see cref="T:System.MissingFieldException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MISSINGMANIFESTRESOURCE">
 <summary>
 Error wrapped in <see cref="T:System.Resources.MissingManifestResourceException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MISSINGMEMBER">
 <summary>
 Error wrapped in <see cref="T:System.MissingMemberException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MISSINGMETHOD">
 <summary>
 Error wrapped in <see cref="T:System.MissingMethodException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MISSINGSATELLITEASSEMBLY">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_MULTICASTNOTSUPPORTED">
 <summary>
 Error wrapped in <see cref="T:System.MulticastNotSupportedException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_NOTFINITENUMBER">
 <summary>
 Error wrapped in <see cref="T:System.NotFiniteNumberException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_NOTSUPPORTED">
 <summary>
 Error wrapped in <see cref="T:System.NotSupportedException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_OBJECTDISPOSED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_OPERATIONCANCELED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_OVERFLOW">
 <summary>
 Error wrapped in <see cref="T:System.OverflowException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_PLATFORMNOTSUPPORTED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_RANK">
 <summary>
 Error wrapped in <see cref="T:System.RankException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_REFLECTIONTYPELOAD">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.ReflectionTypeLoadException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_REMOTING">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.Remoting.RemotingException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SERVER">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.ReflectionTypeLoadException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_RUNTIMEWRAPPED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SAFEARRAYRANKMISMATCH">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SAFEARRAYTYPEMISMATCH">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SAFEHANDLEMISSINGATTRIBUTE">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SECURITY">
 <summary>
 Error wrapped in <see cref="T:System.Security.SecurityException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SEMAPHOREFULL">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SERIALIZATION">
 <summary>
 Error wrapped in <see cref="T:System.Runtime.Serialization.SerializationException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SYNCHRONIZATIONLOCK">
 <summary>
 Error wrapped in <see cref="T:System.Threading.SynchronizationLockException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_SYSTEM">
 <summary>
 Error wrapped in <see cref="T:System.SystemException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TARGET">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.TargetException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TARGETINVOCATION">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.TargetInvocationException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TARGETPARAMCOUNT">
 <summary>
 Error wrapped in <see cref="T:System.Reflection.TargetParameterCountException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_THREADABORTED">
 <summary>
 Error wrapped in <see cref="T:System.Threading.ThreadAbortException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_THREADINTERRUPTED">
 <summary>
 Error wrapped in <see cref="T:System.Threading.ThreadInterruptedException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_THREADSTART">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_THREADSTATE">
 <summary>
 Error wrapped in <see cref="T:System.Threading.ThreadStateException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_THREADSTOP">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TIMEOUT">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TYPEACCESS">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TYPEINITIALIZATION">
 <summary>
 Error wrapped in <see cref="T:System.TypeInitializationException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TYPELOAD">
 <summary>
 Error wrapped in <see cref="T:System.EntryPointNotFoundException"/> class 
 and also <see cref="T:System.TypeLoadException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_TYPEUNLOADED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_UNSUPPORTEDFORMAT">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_VERIFICATION">
 <summary>
 Error wrapped in <see cref="T:System.Security.VerificationException"/> class.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.COR_E_WAITHANDLECANNOTBEOPENED">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.CORSEC_E_CRYPTO">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.CORSEC_E_CRYPTO_UNEX_OPER">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.CORSEC_E_MIN_GRANT_FAIL">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.CORSEC_E_NO_EXEC_PERM">
 <summary>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.HResult.CORSEC_E_POLICY_EXCEPTION">
 <summary>
 
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.WindowsMessages">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The system sends or posts a system-defined message when it communicates with an application. 
 <para></para>
 It uses these messages to control the operations of applications and to provide input and other information for applications to process. 
 <para></para>
 An application can also send or post system-defined messages.
 <para></para>
 Applications generally use these messages to control the operation of control windows created by using preregistered window classes.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644927%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.Null">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The <see cref="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.Null"/> message performs no operation.
 <para></para>
 An application sends the <see cref="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.Null"/> message if it wants to 
 post a message that the recipient window will ignore.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_Sizing">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sent to a window that the user is resizing.
 <para></para>
 By processing this message, an application can monitor the size and position of the drag rectangle
 and, if needed, change its size or position.
 <para></para>
 
 <c>wParam</c> 
 The edge of the window that is being sized.
 <para></para>
 
 <c>lParam</c> 
 A pointer to a <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> structure with the screen coordinates of the drag rectangle.
 <para></para>
 To change the size or position of the drag rectangle, an application must change the members of this structure.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632647%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_ExitSizeMove">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sent one time to a window, after it has exited the moving or sizing modal loop.
 <para></para>
 The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border,
 <para></para>
 or when the window passes the WindowsMessages.WM_SysCommand message to the 
 <c>DefWindowProc</c> function and the <c>wParam</c> parameter of the message
 specifies the Wparams.SC_Move or Wparams.SC_Size value.
 <para></para>
 The operation is complete when <c>DefWindowProc</c> returns.
 <para></para>
 
 <c>wParam</c> 
 This parameter is not used.
 <para></para>
 
 <c>lParam</c> 
 This parameter is not used.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632623%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.WindowsMessages.WM_WindowPosChanging">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Sent to a window whose size, position, or place in the Z order is about to change as a 
 result of a call to the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,ElektroKit.Interop.Win32.Enums.SetWindowPosFlags)"/> function or another window-management function.
 <para></para>
 
 <c>wParam</c> 
 This parameter is not used.
 <para></para>
 
 <c>lParam</c> 
 A pointer to a <c>WINDOWPOS</c> structure that contains information about the window's new size and position.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632653%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags">
 ----------------------------------------------------------------------------------------------------
 <summary>
 The window sizing and positioning flags.
 <para></para>
 Flags combination for <c>uFlags</c> parameter of <see cref="M:ElektroKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,ElektroKit.Interop.Win32.Enums.SetWindowPosFlags)"/> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633545%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.None">
 <summary>
 Indicates any flag.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.AsyncWindowPos">
 <summary>
 If the calling thread and the thread that owns the window are attached to different input queues, 
 the system posts the request to the thread that owns the window.
 <para></para>
 This prevents the calling thread from blocking its execution while other threads process the request.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DeferErase">
 <summary>
 Prevents generation of the <c>WM_SYNCPAINT</c> message.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DrawFrame">
 <summary>
 Draws a frame (defined in the window's class description) around the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.FrameChanged">
 <summary>
 Applies new frame styles set using the SetWindowLong function.
 <para></para>
 Sends a <c>WM_NCCALCSIZE</c> message to the window, even if the window's size is not being changed.
 <para></para>
 If this flag is not specified, <c>WM_NCCALCSIZE</c> is sent only when the window's size is being changed.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.HideWindow">
 <summary>
 Hides the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontActivate">
 <summary>
 Does not activate the window.
 If this flag is not set, the window is activated and moved to the top of
 either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
 </summary>
 <remarks>SWP_NOACTIVATE</remarks>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontCopyBits">
 <summary>
 Discards the entire contents of the client area.
 <para></para>
 If this flag is not specified, the valid contents of the client area are saved and copied back 
 into the client area after the window is sized or repositioned.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.IgnoreMove">
 <summary>
 Retains the current position (ignores X and Y parameters).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontChangeOwnerZOrder">
 <summary>
 Does not change the owner window's position in the Z order.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontRedraw">
 <summary>
 Does not redraw changes.
 <para></para>
 If this flag is set, no repainting of any kind occurs.
 <para></para>
 This applies to the client area, the nonclient area (including the title bar and scroll bars), 
 and any part of the parent window uncovered as a result of the window being moved.
 <para></para>
 When this flag is set, the application must explicitly invalidate or redraw any parts of 
 the window and parent window that need redrawing.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontReposition">
 <summary>
 Same as the <see cref="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontChangeOwnerZOrder"/> flag.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.DontSendChangingEvent">
 <summary>
 Prevents the window from receiving the <c>WM_WINDOWPOSCHANGING</c> message.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.IgnoreResize">
 <summary>
 Retains the current size (ignores the cx and cy parameters).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.IgnoreZOrder">
 <summary>
 Retains the current Z order (ignores the <c>hwndInsertAfter</c> parameter).
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.SetWindowPosFlags.ShowWindow">
 <summary>
 Displays the window.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.RegistryRootKeyId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a registry root-key when calling <see cref="M:ElektroKit.Interop.Win32.NativeMethods.RegLoadKey(System.IntPtr,System.String,System.String)"/> 
 or <see cref="M:ElektroKit.Interop.Win32.NativeMethods.RegUnLoadKey(System.IntPtr,System.String)"/> functions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724889%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.RegistryRootKeyId.HKEY_LOCAL_MACHINE">
 <summary>
 The <c>HKEY_LOCAL_MACHINE</c> registry root key.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.RegistryRootKeyId.HKEY_USERS">
 <summary>
 The <c>HKEY_USERS</c> registry root key.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.ProcessPrivileges">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a process privilege.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb530716%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.None">
 <summary>
 Any process privilege.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.AssignPrimaryTokenPrivilege">
 <summary>
 Required to assign the primary token of a process.
 <para></para>
 User Right: Replace a process-level token.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.AuditPrivilege">
 <summary>
 Required to generate audit-log entries. Give this privilege to secure servers,
 <para></para>
 User Right: Generate security audits.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.BackupPrivilege">
 <summary>
 Required to perform backup operations.
 <para></para>
 This privilege causes the system to grant all read access control to any file, 
 regardless of the access control list (ACL) specified for the file.
 <para></para>
 Any access request other than read is still evaluated with the ACL.
 <para></para>
 This privilege is required by the <c>RegSaveKey</c> and <c>RegSaveKeyExfunctions</c>. 
 <para></para>
 User Right: Back up files and directories.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.ChangeNotifyPrivilege">
 <summary>
 Required to receive notifications of changes to files or directories.
 <para></para>
 This privilege also causes the system to skip all traversal access checks.
 <para></para>
 It is enabled by default for all users.
 <para></para>
 User Right: Bypass traverse checking.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.CreateGlobalPrivilege">
 <summary>
 Required to create named file mapping objects in the global namespace during Terminal Services sessions.
 <para></para>
 This privilege is enabled by default for administrators, services, and the local system account
 <para></para>
 User Right: Create global objects.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.CreatePagefilePrivilege">
 <summary>
 Required to create a paging file.
 <para></para>
 User Right: Create a pagefile.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.CreatePermanentPrivilege">
 <summary>
 Required to create a permanent object.
 <para></para>
 User Right: Create permanent shared objects.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.CreateSymbolicLinkPrivilege">
 <summary>
 Required to create a symbolic link.
 <para></para>
 User Right: Create symbolic links.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.CreateTokenPrivilege">
 <summary>
 Required to create a primary token.
 <para></para>
 User Right: Create a token object.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.DebugPrivilege">
 <summary>
 Required to debug and adjust the memory of a process owned by another account.
 <para></para>
 User Right: Debug programs.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.EnableDelegationPrivilege">
 <summary>
 Required to mark user and computer accounts as trusted for delegation.
 <para></para>
 User Right: Enable computer and user accounts to be trusted for delegation.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.ImpersonatePrivilege">
 <summary>
 Required to impersonate.
 <para></para>
 User Right: Impersonate a client after authentication.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.IncreaseBasePriorityPrivilege">
 <summary>
 Required to increase the base priority of a process.
 <para></para>
 User Right: Increase scheduling priority.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.IncreaseQuotaPrivilege">
 <summary>
 Required to increase the quota assigned to a process.
 <para></para>
 User Right: Adjust memory quotas for a process.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.IncreaseWorkingSetPrivilege">
 <summary>
 Required to allocate more memory for applications that run in the context of users.
 <para></para>
 User Right: Increase a process working set.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.LoadDriverPrivilege">
 <summary>
 Required to load or unload a device driver. 
 <para></para>
 User Right: Load and unload device drivers.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.LockMemoryPrivilege">
 <summary>
 Required to lock physical pages in memory. 
 <para></para>
 User Right: Lock pages in memory.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.MachineAccountPrivilege">
 <summary>
 Required to create a computer account. 
 <para></para>
 User Right: Add workstations to domain.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.ManageVolumePrivilege">
 <summary>
 Required to enable volume management privileges. 
 <para></para>
 User Right: Manage the files on a volume.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.ProfileSingleProcessPrivilege">
 <summary>
 Required to gather profiling information for a single process. 
 <para></para>
 User Right: Profile single process.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.RelabelPrivilege">
 <summary>
 Required to modify the mandatory integrity level of an object.
 <para></para>
 User Right: Modify an object label.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.RemoteShutdownPrivilege">
 <summary>
 Required to shut down a system using a network request. 
 <para></para>
 User Right: Force shutdown from a remote system.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.RestorePrivilege">
 <summary>
 Required to perform restore operations.
 <para></para>
 This privilege causes the system to grant all write access control to any file, 
 regardless of the ACL specified for the file.
 <para></para>
 Any access request other than write is still evaluated with the ACL.
 <para></para>
 Additionally, this privilege enables you to set any valid user or group SID as the owner of a file.
 <para></para>
 This privilege is required by the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.RegLoadKey(System.IntPtr,System.String,System.String)"/> function.
 <para></para>
 User Right: Restore files and directories.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.SecurityPrivilege">
 <summary>
 Required to perform a number of security-related functions, such as controlling and viewing audit messages.
 <para></para>
 This privilege identifies its holder as a security operator
 <para></para>
 User Right: Manage auditing and security log.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.ShutdownPrivilege">
 <summary>
 Required to shut down a local system.
 <para></para>
 User Right: Shut down the system.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.SyncAgentPrivilege">
 <summary>
 Required for a domain controller to use the Lightweight Directory Access Protocol directory synchronization services.
 <para></para>
 This privilege enables the holder to read all objects and properties in the directory, 
 regardless of the protection on the objects and properties. 
 <para></para>
 By default, it is assigned to the Administrator and LocalSystem accounts on domain controllers. 
 <para></para>
 User Right: Synchronize directory service data.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.SystemEnvironmentPrivilege">
 <summary>
 Required to modify the nonvolatile <c>RAM</c> memory of systems that use this type of memory to store configuration information.
 <para></para>
 User Right: Modify firmware environment values.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.SystemProfilePrivilege">
 <summary>
 Required to gather profiling information for the entire system.
 <para></para>
 User Right: Profile system performance.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.SystemtimePrivilege">
 <summary>
 Required to modify the system time. 
 <para></para>
 User Right: Change the system time.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.TakeOwnershipPrivilege">
 <summary>
 Required to take ownership of an object without being granted discretionary access.
 <para></para>
 This privilege allows the owner value to be set only to 
 those values that the holder may legitimately assign as the owner of an object. 
 <para></para>
 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.TcbPrivilege">
 <summary>
 This privilege identifies its holder as part of the trusted computer base.
 <para></para>
 Some trusted protected subsystems are granted this privilege.
 <para></para>
 User Right: Act as part of the operating system.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.TimeZonePrivilege">
 <summary>
 Required to adjust the time zone associated with the computer's internal clock.
 <para></para>
 User Right: Change the time zone.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.TrustedCredManAccessPrivilege">
 <summary>
 Required to access Credential Manager as a trusted caller.
 <para></para>
 User Right: Access Credential Manager as a trusted caller.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.UndockPrivilege">
 <summary>
 Required to undock a laptop.
 <para></para>
 User Right: Remove computer from docking station.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.ProcessPrivileges.UnsolicitedInputPrivilege">
 <summary>
 Required to read unsolicited input from a terminal device.
 <para></para>
 User Right: Not applicable.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Enums.PrivilegeStates">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Specifies a privilege state.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa379630%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.PrivilegeStates.PrivilegeDisabled">
 <summary>
 The privilege is disabled.
 </summary>        
 <remarks>
 <see href="http://referencesource.microsoft.com/system.servicemodel/System/ServiceModel/ComIntegration/SafeNativeMethods.cs.html#"/>
 </remarks>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.PrivilegeStates.PrivilegeEnabledByDefault">
 <summary>
 The privilege is enabled by default.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.PrivilegeStates.PrivilegeEnabled">
 <summary>
 The privilege is enabled.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.PrivilegeStates.PrivilegeRemoved">
 <summary>
 Used to remove a privilege.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Enums.PrivilegeStates.PrivilegeUsedForAccess">
 <summary>
 The privilege was used to gain access to an object or service.
 <para></para>
 This flag is used to identify the relevant privileges 
 in a set passed by a client application that may contain unnecessary privileges
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.NativeMethods">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Platform Invocation methods (P/Invoke), access unmanaged code.
 <para></para>
 This class does not suppress stack walks for unmanaged code permission.
 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute"/> must not be applied to this class.
 <para></para>
 This class is for methods that can be used anywhere because a stack walk will be performed.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/ms182161.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.#ctor">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Prevents a default instance of the <see cref="T:ElektroKit.Interop.Win32.NativeMethods"/> class from being created.
 </summary>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.RegLoadKey(System.IntPtr,System.String,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Creates a subkey under <c>HKEY_USERS</c> or <c>HKEY_LOCAL_MACHINE</c> and loads the data from the 
 specified registry hive into that subkey.
 <para></para>
 Applications that back up or restore system state including system files and registry hives 
 should use the <c>Volume Shadow Copy</c> service instead of the registry functions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724889%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="keyHandle">
 A handle to the key where the subkey will be created.
 <para></para>
 This can be a handle returned by a call to <c>RegConnectRegistry</c> function.
 </param>
 
 <param name="subKey">
 The name of the key to be created under <paramref name="keyHandle"/> parameter.
 <para></para>
 This subkey is where the registration information from the file will be loaded.
 <para></para>
 Key names are not case sensitive.
 </param>
 
 <param name="file">
 The name of the file containing the registry data. 
 <para></para>
 This file must be a local file that was created with the <c>RegSaveKey</c> function.
 <para></para>
 If this file does not exist, a file is created with the specified name. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see cref="F:ElektroKit.Interop.Win32.Enums.HResult.S_OK"/>.
 <para></para>
 If the function fails, the return value is other HRESULT code. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.RegUnLoadKey(System.IntPtr,System.String)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Unloads the specified registry key and its subkeys from the registry.
 <para></para>
 Applications that back up or restore system state including system files and registry hives 
 should use the <c>Volume Shadow Copy</c> service instead of the registry functions.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724924%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="keyHandle">
 A handle to the key where the subkey will be unloaded.
 </param>
 
 <param name="subKey">
 The name of the subkey to be unloaded.
 <para></para>
 The key referred to by the <paramref name="subKey"/> parameter must have been created by 
 using the <see cref="M:ElektroKit.Interop.Win32.NativeMethods.RegLoadKey(System.IntPtr,System.String,System.String)"/> function.
 <para></para>
 Key names are not case sensitive.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see cref="F:ElektroKit.Interop.Win32.Enums.HResult.S_OK"/>.
 <para></para>
 If the function fails, the return value is other HRESULT code. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetCurrentThreadId">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets the thread identifier of the calling thread.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683183%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The thread identifier of the calling thread.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SHDefExtractIcon(System.String,System.Int32,System.UInt32,System.IntPtr@,System.IntPtr@,System.UInt32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Provides a default handler to extract an icon from a file.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762149%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="iconFile">
 A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.
 </param>
 
 <param name="iconIndex">
 The location of the icon within the file named in pszIconFile.
 <para></para>
 If this is a positive number, it refers to the zero-based position of the icon in the file.
 <para></para>
 For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd.
 If this is a negative number, it refers to the icon's resource ID.
 </param>
 
 <param name="flags">
 A flag that controls the icon extraction.
 </param>
 
 <param name="refHiconLarge">
 A pointer to an <c>HICON</c> that, when this function returns successfully, 
 receives the handle of the large version of the icon specified in the LOWORD of nIconSize.
 <para></para>
 This value can be <see cref="F:System.IntPtr.Zero"/>.
 </param>
 
 <param name="refHiconSmall">
 A pointer to an <c>HICON</c> that, when this function returns successfully, 
 receives the handle of the small version of the icon specified in the <c>HIWORD</c> of <paramref name="iconSize"/> param.
 <para></para>
 This value can be <see cref="F:System.IntPtr.Zero"/>.
 </param>
 
 <param name="iconSize">
 A value that contains the large icon size in its <c>LOWORD</c> and the small icon size in its <c>HIWORD</c>. 
 <para></para>
 Size is measured in pixels.
 <para></para>
 Pass <c>0</c> to specify default large and small sizes.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 This function can return one of these values:
 <para></para>
 <see cref="F:ElektroKit.Interop.Win32.Enums.HResult.S_OK"/>, <see cref="F:ElektroKit.Interop.Win32.Enums.HResult.S_FALSE"/> or <see cref="F:ElektroKit.Interop.Win32.Enums.HResult.E_FAIL"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetWindowRect(System.IntPtr,ElektroKit.Interop.Win32.Types.NativeRectangle@)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the dimensions of the bounding rectangle of the specified window. 
 <para></para>
 The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633519%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A <see cref="T:System.IntPtr"/> handle to the window.
 </param>
 
 <param name="refRect">
 A pointer to a <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> structure that receives the screen coordinates of the 
 upper-left and lower-right corners of the window.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 <see langword="True"/> if the function succeeds, <see langword="False"/> otherwise.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Enumerates all nonchild windows associated with a thread by passing the handle to each window, 
 in turn, to an application-defined callback function.
 <para></para>
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.EnumThreadWindows(System.UInt32,ElektroKit.Interop.Win32.Delegates.EnumThreadWindowsProc,System.IntPtr)"/> continues until the last window is enumerated 
 or the callback function returns <see langword="False"/>.
 <para></para>
 To enumerate child windows of a particular window, use the EnumChildWindows function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633495%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="dwThreadId">
 The identifier of the thread whose windows are to be enumerated.
 </param>
 
 <param name="lpEnumFunc">
 A pointer to an application-defined callback function.
 </param>
 
 <param name="lParam">
 An application-defined value to be passed to the callback function. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the callback function returns <see langword="True"/> for all windows in the thread specified by dwThreadId, 
 the return value is <see langword="True"/>.
 <para></para>
 If the callback function returns <see langword="False"/> on any enumerated window, 
 or if there are no windows found in the thread specified by dwThreadId, 
 the return value is <see langword="False"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves the name of the class to which the specified window belongs.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633582(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window and, indirectly, the class to which the window belongs.
 </param>
 
 <param name="className">
 The class name string. 
 </param>
 
 <param name="maxCount">
 The length of the <paramref name="className"/> buffer, in characters. 
 <para></para>
 The buffer must be large enough to include the terminating null character; 
 otherwise, the class name string is truncated to <paramref name="maxCount"/>-1 characters. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the number of characters copied to the buffer, 
 not including the terminating null character.
 <para></para>
 If the function fails, the return value is <c>0</c>. 
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.GetDlgItem(System.IntPtr,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Retrieves a handle to a control in the specified dialog box.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms645481%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the dialog box that contains the control
 .</param>
 
 <param name="index">
 The index of the item to be retrieved.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is the window handle of the specified control.
 <para></para>
 If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, 
 indicating an invalid dialog box handle or a nonexistent control.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Destroys the specified window.
 The function sends WindowsMessages.WM_Destroy and WindowsMessages.WM_NcDestroy messages to the window 
 to deactivate it and remove the keyboard focus from it.
 <para></para>
 The function also destroys the window's menu, flushes the thread message queue, destroys timers, 
 removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).
 <para></para>
 If the specified window is a parent or owner window, 
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)"/> automatically destroys the associated child or owned windows when 
 it destroys the parent or owner window.
 <para></para>
 The function first destroys child or owned windows, and then it destroys the parent or owner window.
 <para></para>
 <see cref="M:ElektroKit.Interop.Win32.NativeMethods.DestroyWindow(System.IntPtr)"/> also destroys modeless dialog boxes created by the <c>CreateDialog</c> function.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632682%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window to be destroyed. 
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see cref="F:System.IntPtr.Zero"/>.
 <para></para>
 If the function fails, the return value is equal to a handle to the local memory object.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,ElektroKit.Interop.Win32.Enums.SetWindowPosFlags)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Changes the size, position, and Z order of a child, pop-up, or top-level window.
 <para></para>
 These windows are ordered according to their appearance on the screen.
 <para></para>
 The topmost window receives the highest rank and is the first window in the Z order.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms633545(v=vs.85).aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
 <param name="hwnd">
 A handle to the window.
 </param>
 
 <param name="hwndInsertAfter">
 A handle to the window to precede the positioned window in the Z order.
 </param>
 
 <param name="x">
 The new position of the left side of the window, in client coordinates.
 </param>
 
 <param name="y">
 The new position of the top of the window, in client coordinates.
 </param>
 
 <param name="cx">
 The new width of the window, in pixels.
 </param>
 
 <param name="cy">
 The new height of the window, in pixels.
 </param>
 
 <param name="uFlags">
 The window sizing and positioning flags.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 If the function succeeds, the return value is <see langword="True"/>.
 <para></para>
 If the function fails, the return value is <see langword="False"/>.
 <para></para>
 To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>. 
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:ElektroKit.Interop.Win32.Types.WindowPos">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Contains information about the size and position of a window.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632612%28v=vs.85%29.aspx"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.Hwnd">
 <summary>
 A handle to the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.HwndInsertAfter">
 <summary>
 The position of the window in Z order (front-to-back position). 
 This member can be a handle to the window behind which this window is placed, 
 or can be one of the special values listed with the 'SetWindowPos' function. 
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.X">
 <summary>
 The position of the left edge of the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.Y">
 <summary>
 The position of the top edge of the window.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.Width">
 <summary>
 The window width, in pixels.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.Height">
 <summary>
 The window height, in pixels.
 </summary>
</member>
<member name="F:ElektroKit.Interop.Win32.Types.WindowPos.Flags">
 <summary>
 Flag containing the window position.
 </summary>
</member>
<member name="T:ElektroKit.Interop.Win32.Types.NativeRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Defines the coordinates of the upper-left and lower-right corners of a rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <remarks>
 <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd162897%28v=vs.85%29.aspx"/>
 <para></para>
 <see href="http://www.pinvoke.net/default.aspx/Structures/rect.html"/>
 </remarks>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Left">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the x-coordinate of the upper-left corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The x-coordinate of the upper-left corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Top">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the y-coordinate of the upper-left corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The y-coordinate of the upper-left corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Right">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the x-coordinate of the lower-right corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The x-coordinate of the lower-right corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="P:ElektroKit.Interop.Win32.Types.NativeRectangle.Bottom">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Gets or sets the y-coordinate of the lower-right corner of the rectangle.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <value>
 The y-coordinate of the lower-right corner of the rectangle.
 </value>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="left">
 The x-coordinate of the upper-left corner of the rectangle.
 </param>
 
 <param name="top">
 The y-coordinate of the upper-left corner of the rectangle.
 </param>
 
 <param name="right">
 The x-coordinate of the lower-right corner of the rectangle.
 </param>
 
 <param name="bottom">
 The y-coordinate of the lower-right corner of the rectangle.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.#ctor(System.Drawing.Rectangle)">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> struct.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.op_Implicit(ElektroKit.Interop.Win32.Types.NativeRectangle)~System.Drawing.Rectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/> to <see cref="T:System.Drawing.Rectangle"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:System.Drawing.Rectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="M:ElektroKit.Interop.Win32.Types.NativeRectangle.op_Implicit(System.Drawing.Rectangle)~ElektroKit.Interop.Win32.Types.NativeRectangle">
 ----------------------------------------------------------------------------------------------------
 <summary>
 Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/>.
 </summary>
 ----------------------------------------------------------------------------------------------------
 <param name="rect">
 The <see cref="T:System.Drawing.Rectangle"/>.
 </param>
 ----------------------------------------------------------------------------------------------------
 <returns>
 The resulting <see cref="T:ElektroKit.Interop.Win32.Types.NativeRectangle"/>.
 </returns>
 ----------------------------------------------------------------------------------------------------
</member>
<member name="T:UserInterface.Main">
 <summary>
 The Main user interface Form.
 </summary>
</member>
<member name="F:UserInterface.Main.windowSticker">
 <summary>
 The <see cref="F:UserInterface.Main.windowSticker"/> instance that sticks the Form on the Desktop screen.
 </summary>
</member>
<member name="F:UserInterface.Main.startupType">
 <summary>
 Indicates the startup type, for current user only or for all users.
 </summary>
</member>
<member name="P:UserInterface.Main.SelectedStartupType">
 <summary>
 Gets or sets the startup type, for current user only or for all users..
 </summary>
 <value>The startup type.</value>
</member>
<member name="M:UserInterface.Main.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:UserInterface.Main"/> class.
 </summary>
</member>
<member name="M:UserInterface.Main.Main_Shown(System.Object,System.EventArgs)">
 <summary>
 Handles the Load event of the Form.
 </summary>
 <param name="sender">The sender.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.Form_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
 <summary>
 Handles the DragEnter event of the Form.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.Windows.Forms.DragEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.Form_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
 <summary>
 Handles the DragDrop event of the Form.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.Windows.Forms.DragEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.TextBoxes_TextChanged(System.Object,System.EventArgs)">
 <summary>
 Handles the _TextChanged event of the RadioButtonsTextBoxes.
 </summary>
 <param name="sender">The sender.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.RadioButtons_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 Handles the CheckedChanged event of the RadioButtons.
 </summary>
 <param name="sender">The sender.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.Button_AddToStartup_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the Click event of the Button_AddToStartup control.
 </summary>
 <param name="sender">The sender.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.ContextMenuStrip_Recent_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary>
 Handles the Opening event of the ContextMenuStrip_Recent control.
 </summary>
 <param name="sender">The sender.</param>
 <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.IToolStripMenuItem_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the Click event of the IToolStripMenuItem control.
 </summary>
 <param name="sender">The sender.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.Button_OpenFile_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the Click event of the Button_OpenFile control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.OpenFileDialog1_FileOk(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary>
 Handles the FileOk event of the OpenFileDialog1 control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:UserInterface.Main.SetControlHints">
 <summary>
 Sets the control hints.
 </summary>
</member>
<member name="M:UserInterface.Main.RemoveControlHints">
 <summary>
 Removes the control hints.
 </summary>
</member>
<member name="M:UserInterface.Main.LoadDragDropFile(System.IO.FileInfo)">
 <summary>
 Loads the dropped file into the textboxes.
 </summary>
 <param name="File">The file to load.</param>
</member>
<member name="M:UserInterface.Main.AddFileToRegistryStartup">
 <summary>
 Adds the file to the registry startup.
 </summary>
</member>
<member name="M:UserInterface.Main.CheckRecentFiles">
 <summary>
 Checks whether the recent files object is empty, then instances a new one.
 </summary>
</member>
<member name="M:UserInterface.Main.RenewRecentfiles">
 <summary>
 Renews the recentfiles to controls the maximum number of entries.
 </summary>
</member>
</members>
</doc>
